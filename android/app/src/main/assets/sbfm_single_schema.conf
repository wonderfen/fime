id = sbfm_single
name = 声笔飞码单字
version = "0.1"
author = 声笔系列码
basePackage = top.someapp.fimesdk.table

// 键盘
keyboards = fime_keyboards.conf

// 选项
options = {
  cn: [中文, 英文]
  caps: [小写, 大写]
  shapes: [半角, 全角]
}

// 输入码编辑器
// “顶功”风格编码格式
code-set-a = "[qwrtypsdfghjklzxcvbnm]"  // 编码集合 A，出现在编码的最前面，至少一个
code-set-b = "[aeiou]"                  // 编码集合 B，出现在编码的后面。A B 无交集

inputEditor: {
  type: ${basePackage}.TableInputEditor
  alphabet: "qwertyuiopasdfghjklxcvbnm"
  initials: "qwrtypsdfghjklzxcvbnm"
  max-input-length: 6   // 最大允许的输入码长度
  // 输入码长度超过 max-input-length 时： clear | accept | reject
  // clear: 清空
  // accpet: 继续输入
  // reject: 拒绝输入
  length-overflow: reject
  // 输入码的切分方式： whole | pinyin | length:n | reg: xxx
  // whole: 整体作为输入码，不切分
  // pinyin: 按汉语拼音音节切分
  // length:n: 等长切分，每 n 个字符切分一次
  // regex:xxx: 使用正则表达式切分
  syncopate: "regex:("${code-set-a}${code-set-a}"?"${code-set-b}"*)"
  converter: {
    rules: ["M:aeiou=AEIOU"]  // 词典里面的 aeiou 是大写的
  }
}

// 翻译器
translator: {
  type: ${basePackage}.TableTranslator
  // 词典
  dict: {
    name: sbfm_single
    file: sbfm_single.csv
//    converter: {
//      rules: ["M:AEIOU=aeiou"]  // 词典里面的 aeiou 是大写的
//    }
  }
  limit: 6              // 限制搜索结果不超过 6 个
  search-code-extend: 1 // 搜索结果包含未输入的 1 个编码，如果需要全等的搜索方式，设置为 0
}

// 提交器
ejector: {
  type: ${basePackage}.TableEjector
  //  order: [candidates, code] // 上屏优先级，先按候选计算，再按编码计算
  //  candidates: {
  //    unique: eject // 唯一候选上屏
  //  }
  code: [
    // ABA，提交第一个候选
    {match: ${code-set-a}${code-set-b}${code-set-a}, action: ejectFirst}
    // AAA，提交第一个候选
    {match: ${code-set-a}${code-set-a}${code-set-a}, action: ejectFirst}
    // AABB*A，提交第一个候选
    {match: ${code-set-a}${code-set-a}${code-set-b}${code-set-b}"*"${code-set-a}, action: ejectFirst}
  ]
}
