ext {
  versionMajor = 0
  versionMinor = 1
  versionPatch = 0
  versionCode = 0
  versionName = ''
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
  localPropertiesFile.withReader('UTF-8') { reader ->
    localProperties.load(reader)
  }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
  throw new GradleException(
      "Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def versionProp = new Properties()
rootProject.file('version.properties').withReader('UTF-8') { reader ->
  versionProp.load(reader)
}

project.ext.versionMajor = Integer.valueOf(versionProp.getProperty('versionMajor'))
project.ext.versionMinor = Integer.valueOf(versionProp.getProperty('versionMinor'))
project.ext.versionPatch = Integer.valueOf(versionProp.getProperty('versionPatch'))

static String exec(String cmd) {
  def result = ""
  try {
    result = cmd.execute().text.trim()
  } catch (Exception e) {
    e.printStackTrace()
  }
  return result
}

static def getCommitCount() {
  def count
  try {
    count = exec('git rev-list HEAD --count').toInteger()
  } catch (Exception e) {
    e.printStackTrace()
    count = 0
  }
  return count
}

static String getGitShortHash() {
  return exec('git rev-parse --short HEAD')
}

static String getBuildTime() {
  def now = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00"))
  return String.format("%04d-%02d-%02dT%02d:%02d:%02d+08",
      now.get(Calendar.YEAR),
      now.get(Calendar.MONTH) + 1,
      now.get(Calendar.DATE),
      now.get(Calendar.HOUR_OF_DAY),
      now.get(Calendar.MINUTE),
      now.get(Calendar.SECOND))
}

def initVersionInfo() {
  println('initVersionInfo')
  // 2.0.1 => 02_00_001 max: 99_99_999
  // see: https://semver.org/lang/zh-CN/ and https://regex101.com/r/oQpExV/1
  if (project.ext.versionCode == 0) {
    def major = project.ext.versionMajor
    def minor = project.ext.versionMinor
    def patch = project.ext.versionPatch
    def update = getCommitCount()
    project.ext.versionCode = major * 100000 + minor * 1000 + patch
    def devFlag = gradle.startParameter.taskNames.contains('assembleRelease') ? '' : '-dev'
    versionName = "$major.${minor}.$patch${devFlag}+$update"
    project.ext.versionName = versionName
  }
  println("app.versionCode = ${project.ext.versionCode}")
  println("app.versionName = ${project.ext.versionName}")
}

initVersionInfo()

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-kapt'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
  compileSdkVersion flutter.compileSdkVersion
  ndkVersion flutter.ndkVersion

  compileOptions {
    coreLibraryDesugaringEnabled true // 所谓脱糖
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  defaultConfig {
    applicationId "top.someapp.fime"
    minSdkVersion 21 // 5.1
    targetSdkVersion flutter.targetSdkVersion
    versionCode project.ext.versionCode
    versionName project.ext.versionName
    manifestPlaceholders = [
        app_name: "@string/app_name",
        file_provider_auth: "top.someapp.fime.fileprovider"
    ]
    buildConfigField "String", "BUILD_GIT_SHORT_HASH", "\"${gitShortHash}\""
    buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    ndk {
      // Filter for architectures supported by Flutter.
      abiFilters 'arm64-v8a', 'x86_64'
    }

    // used by Room, to test migrations
    javaCompileOptions {
      annotationProcessorOptions {
        arguments += [
            "room.schemaLocation": "$projectDir/schemas".toString(),
            "room.incremental": "true",
            "room.expandProjection": "true"]
      }
    }
  }

  aaptOptions {
    noCompress 'dat' // 打包时不要压缩后缀名为 .dat 的文件
  }

  signingConfigs {
    release {
      keyAlias keystoreProperties['keyAlias']
      keyPassword keystoreProperties['keyPassword']
      storeFile file(keystoreProperties['storeFile'])
      storePassword keystoreProperties['storePassword']
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix '.dev' // 区分 release 包，以允许同时安装 release 和 debug 方便对比
      manifestPlaceholders = [
          app_name: "@string/app_name_dev",
          file_provider_auth: "top.someapp.fime.dev.fileprovider"
      ]
      ndk {
        abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'
      }
    }
    release {
      ndk {
        abiFilters 'arm64-v8a', 'x86_64'
      }
      signingConfig signingConfigs.release
    }
  }

  // 自定义生成的apk名字
  applicationVariants.all { variant ->
    variant.outputs.all {
      outputFileName = "fime-${project.ext.versionName}.apk"
    }
  }
}

dependencies {
  def room_version = "2.2.5"

  coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
  //  implementation fileTree(include: ['*.jar', '*.aar'], dir: 'libs') // or below
  implementation project(path: ':fime-sdk') // or above
  implementation 'com.typesafe:config:1.2.1' // for jdk 7 compatible ?
  // androidx room
  implementation "androidx.room:room-runtime:$room_version"
  annotationProcessor "androidx.room:room-compiler:$room_version"
  //  kapt("androidx.room:room-compiler:$room_version")

  // fast util
  implementation 'it.unimi.dsi:fastutil:7.2.1' // for jdk 7 compatible

  // trie
  implementation 'com.hankcs:aho-corasick-double-array-trie:1.2.3'
  implementation 'com.github.takawitter:trie4j:0.9.8'

  // popup
  //  implementation 'io.github.razerdp:BasePopup:3.2.1'

  // for test
  testImplementation "junit:junit:4.12"
  androidTestImplementation 'androidx.test:runner:1.3.0'
}

flutter {
  source '../..'
}
